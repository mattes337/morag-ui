{
  "openapi": "3.1.0",
  "info": {
    "title": "MoRAG API",
    "description": "\n        # Multi-modal Retrieval Augmented Generation API\n\n        MoRAG provides comprehensive document processing, analysis, and retrieval capabilities\n        with support for multiple file formats including PDFs, audio, video, and text documents.\n\n        ## Core Features\n        - **Processing Endpoints**: Process content and return results immediately\n        - **Ingestion Endpoints**: Process content and store in vector database for retrieval\n        - **Task Management**: Track processing status and manage background tasks\n        - **Search**: Query stored content using vector similarity\n\n        ## UI Interoperability Features\n\n        Specialized endpoints for UI applications:\n\n        - **Markdown Conversion**: Fast file-to-markdown conversion for preview functionality\n        - **Processing with Webhooks**: Complete document processing with real-time progress notifications\n        - **Document Deduplication**: ID-based deduplication system to prevent duplicate processing\n        - **Temporary File Management**: Access to intermediate files generated during processing\n\n        ## Authentication\n\n        Most endpoints support optional Bearer token authentication. Temporary file endpoints\n        require session-based access control for security.\n\n        ## Endpoint Categories\n        - `/process/*` - Immediate processing (no storage)\n        - `/api/v1/ingest/*` - Background processing with vector storage\n        - `/api/v1/status/*` - Task status and management\n        - `/search` - Vector similarity search\n        - `/api/convert/*` - File conversion for UI preview\n        - `/api/files/*` - Temporary file management\n        ",
    "version": "1.0.0",
    "contact": {
      "name": "MoRAG Support",
      "email": "support@morag.example.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    },
    {
      "url": "https://api.morag.example.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Root",
        "description": "Root endpoint.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Health check endpoint.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/process": {
      "post": {
        "tags": [
          "Unified Processing"
        ],
        "summary": "Unified Process",
        "description": "Unified processing endpoint that handles convert, process, and ingest modes.\n\nThis single endpoint replaces all previous processing/ingestion endpoints:\n- mode='convert': Fast markdown conversion for UI preview\n- mode='process': Full processing with immediate results\n- mode='ingest': Full processing + vector storage with background tasks\n\nSource types:\n- source_type='file': Upload file via multipart form\n- source_type='url': Process content from URL\n- source_type='batch': Process multiple items",
        "operationId": "unified_process_api_v1_process_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_unified_process_api_v1_process_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnifiedProcessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/process/url": {
      "post": {
        "tags": [
          "Processing"
        ],
        "summary": "Process Url",
        "description": "Process content from a URL.",
        "operationId": "process_url_process_url_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessURLRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/process/file": {
      "post": {
        "tags": [
          "Processing"
        ],
        "summary": "Process File",
        "description": "Process content from an uploaded file.",
        "operationId": "process_file_process_file_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_process_file_process_file_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/process/web": {
      "post": {
        "tags": [
          "Processing"
        ],
        "summary": "Process Web Page",
        "description": "Process a web page.",
        "operationId": "process_web_page_process_web_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessURLRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/process/youtube": {
      "post": {
        "tags": [
          "Processing"
        ],
        "summary": "Process Youtube Video",
        "description": "Process a YouTube video.",
        "operationId": "process_youtube_video_process_youtube_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessURLRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/process/batch": {
      "post": {
        "tags": [
          "Processing"
        ],
        "summary": "Process Batch",
        "description": "Process multiple items in batch.",
        "operationId": "process_batch_process_batch_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessBatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/process/remote-file": {
      "post": {
        "tags": [
          "Processing"
        ],
        "summary": "Process Remote File",
        "description": "Process content from a remote file (UNC path or HTTP/HTTPS URL) without storing in vector database.",
        "operationId": "process_remote_file_process_remote_file_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessRemoteFileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Search Similar",
        "description": "Search for similar content.",
        "operationId": "search_similar_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ingest/file": {
      "post": {
        "tags": [
          "Ingestion"
        ],
        "summary": "Ingest File",
        "description": "Ingest and process a file, storing results in vector database.",
        "operationId": "ingest_file_api_v1_ingest_file_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_ingest_file_api_v1_ingest_file_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ingest/url": {
      "post": {
        "tags": [
          "Ingestion"
        ],
        "summary": "Ingest Url",
        "description": "Ingest and process content from URL, storing results in vector database.",
        "operationId": "ingest_url_api_v1_ingest_url_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestURLRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ingest/batch": {
      "post": {
        "tags": [
          "Ingestion"
        ],
        "summary": "Ingest Batch",
        "description": "Ingest and process multiple items in batch, storing results in vector database.",
        "operationId": "ingest_batch_api_v1_ingest_batch_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestBatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchIngestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ingest/remote-file": {
      "post": {
        "tags": [
          "Ingestion"
        ],
        "summary": "Ingest Remote File",
        "description": "Ingest and process a remote file (UNC path or HTTP/HTTPS URL), storing results in vector database.",
        "operationId": "ingest_remote_file_api_v1_ingest_remote_file_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestRemoteFileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/status/{task_id}": {
      "get": {
        "tags": [
          "Task Management"
        ],
        "summary": "Get Task Status",
        "description": "Get the status of a processing task.",
        "operationId": "get_task_status_api_v1_status__task_id__get",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/status/": {
      "get": {
        "tags": [
          "Task Management"
        ],
        "summary": "List Active Tasks",
        "description": "Get all currently active tasks.",
        "operationId": "list_active_tasks_api_v1_status__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/status/stats/queues": {
      "get": {
        "tags": [
          "Task Management"
        ],
        "summary": "Get Queue Stats",
        "description": "Get processing queue statistics.",
        "operationId": "get_queue_stats_api_v1_status_stats_queues_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/ingest/{task_id}": {
      "delete": {
        "tags": [
          "Task Management"
        ],
        "summary": "Cancel Task",
        "description": "Cancel a running or pending task.",
        "operationId": "cancel_task_api_v1_ingest__task_id__delete",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/cleanup": {
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Force Temp Cleanup",
        "description": "Force immediate cleanup of old temporary files.",
        "operationId": "force_temp_cleanup_api_v1_admin_cleanup_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/convert/markdown": {
      "post": {
        "tags": [
          "Conversion"
        ],
        "summary": "Convert To Markdown",
        "description": "Convert uploaded file to markdown format for UI preview.\n\nThis endpoint provides fast conversion without full processing pipeline.\nSupports PDF, audio, video, text, and other document formats.",
        "operationId": "convert_to_markdown_api_convert_markdown_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_convert_to_markdown_api_convert_markdown_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkdownConversionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/convert/process-ingest": {
      "post": {
        "tags": [
          "Conversion"
        ],
        "summary": "Process With Ingestion",
        "description": "Process file with full MoRAG pipeline and webhook notifications.\n\nThis endpoint runs the complete processing pipeline including:\n1. Markdown conversion\n2. Metadata extraction\n3. Content processing\n4. Vector database ingestion\n\nProgress is reported via webhooks at each step.",
        "operationId": "process_with_ingestion_api_convert_process_ingest_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_process_with_ingestion_api_convert_process_ingest_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessIngestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/files/temp/{session_id}": {
      "get": {
        "tags": [
          "Temporary Files"
        ],
        "summary": "List Session Files",
        "description": "List all files in a session.\n\nReturns metadata for all files in the specified session including\nfile names, sizes, content types, and expiration information.",
        "operationId": "list_session_files_api_files_temp__session_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Temporary Files"
        ],
        "summary": "Delete Session",
        "description": "Delete all files for a session.\n\nImmediately removes all files and directories associated with\nthe specified session. This operation cannot be undone.",
        "operationId": "delete_session_api_files_temp__session_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/files/temp/{session_id}/{filename}": {
      "get": {
        "tags": [
          "Temporary Files"
        ],
        "summary": "Download File",
        "description": "Download a file from the session directory.\n\nSupports:\n- Direct download of files\n- Range requests for partial content\n- Proper content-type detection\n- Streaming for large files",
        "operationId": "download_file_api_files_temp__session_id___filename__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename"
            }
          },
          {
            "name": "range",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Range"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/files/temp/cleanup": {
      "post": {
        "tags": [
          "Temporary Files"
        ],
        "summary": "Manual Cleanup",
        "description": "Manually trigger cleanup of expired sessions.\n\nThis endpoint allows administrators to immediately clean up\nexpired sessions without waiting for the automatic cleanup cycle.",
        "operationId": "manual_cleanup_api_files_temp_cleanup_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/files/temp/{session_id}/{filename}/info": {
      "get": {
        "tags": [
          "Temporary Files"
        ],
        "summary": "Get File Info",
        "description": "Get metadata information about a specific file.\n\nReturns detailed information about a file without downloading it,\nincluding size, content type, creation time, and other metadata.",
        "operationId": "get_file_info_api_files_temp__session_id___filename__info_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/remote-jobs/": {
      "post": {
        "tags": [
          "Remote Jobs"
        ],
        "summary": "Create Remote Job",
        "description": "Create a new remote conversion job.",
        "operationId": "create_remote_job_api_v1_remote_jobs__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRemoteJobRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRemoteJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/remote-jobs/poll": {
      "get": {
        "tags": [
          "Remote Jobs"
        ],
        "summary": "Poll For Jobs",
        "description": "Poll for available remote jobs.",
        "operationId": "poll_for_jobs_api_v1_remote_jobs_poll_get",
        "parameters": [
          {
            "name": "worker_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Worker Id"
            }
          },
          {
            "name": "content_types",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Content Types"
            }
          },
          {
            "name": "max_jobs",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "Max Jobs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollJobsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/remote-jobs/{job_id}/result": {
      "put": {
        "tags": [
          "Remote Jobs"
        ],
        "summary": "Submit Job Result",
        "description": "Submit processing result for a remote job.",
        "operationId": "submit_job_result_api_v1_remote_jobs__job_id__result_put",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitResultRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/remote-jobs/{job_id}/status": {
      "get": {
        "tags": [
          "Remote Jobs"
        ],
        "summary": "Get Job Status",
        "description": "Get current status of a remote job.",
        "operationId": "get_job_status_api_v1_remote_jobs__job_id__status_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/remote-jobs/{job_id}/download": {
      "get": {
        "tags": [
          "Remote Jobs"
        ],
        "summary": "Download Job File",
        "description": "Download source file for a remote job.",
        "operationId": "download_job_file_api_v1_remote_jobs__job_id__download_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/query": {
      "post": {
        "tags": [
          "enhanced-query"
        ],
        "summary": "Enhanced Query",
        "description": "Enhanced query endpoint with graph-augmented retrieval.",
        "operationId": "enhanced_query_api_v2_query_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnhancedQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnhancedQueryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/query/stream": {
      "post": {
        "tags": [
          "enhanced-query"
        ],
        "summary": "Enhanced Query Stream",
        "description": "Streaming version of enhanced query for real-time results.",
        "operationId": "enhanced_query_stream_api_v2_query_stream_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnhancedQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/entity/query": {
      "post": {
        "tags": [
          "enhanced-query"
        ],
        "summary": "Entity Query",
        "description": "Query specific entities and their relationships.",
        "operationId": "entity_query_api_v2_entity_query_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Entity Query Api V2 Entity Query Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/graph/traverse": {
      "post": {
        "tags": [
          "enhanced-query"
        ],
        "summary": "Graph Traversal",
        "description": "Perform graph traversal between entities.",
        "operationId": "graph_traversal_api_v2_graph_traverse_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GraphTraversalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GraphTraversalResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/graph/analytics": {
      "post": {
        "tags": [
          "enhanced-query"
        ],
        "summary": "Graph Analytics",
        "description": "Get graph analytics and statistics.",
        "operationId": "graph_analytics_api_v2_graph_analytics_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GraphAnalyticsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/intelligent-query": {
      "post": {
        "tags": [
          "intelligent-retrieval"
        ],
        "summary": "Intelligent Retrieval",
        "description": "Perform intelligent entity-based retrieval with recursive path following.\n\nThis endpoint:\n1. Identifies entities from the user prompt\n2. Retrieves entity nodes/chunks from Neo4j/Qdrant\n3. Uses LLM to decide which paths to follow recursively\n4. Extracts key facts from retrieved chunks with source information\n5. Returns structured JSON with facts and sources\n\nNote: This endpoint maintains backward compatibility. For new applications,\nconsider using /intelligent-query/facts which uses the improved fact-based system.",
        "operationId": "intelligent_retrieval_api_v2_intelligent_query_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntelligentRetrievalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntelligentRetrievalResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/intelligent-query/facts": {
      "post": {
        "tags": [
          "intelligent-retrieval"
        ],
        "summary": "Intelligent Fact Retrieval",
        "description": "Perform intelligent fact-based retrieval using the new graph structure.\n\nThis endpoint uses the RecursiveFactRetrievalService to:\n1. Extract entities from the user query\n2. Perform recursive graph traversal with fact extraction\n3. Score and filter facts based on relevance\n4. Return structured facts with source attribution",
        "operationId": "intelligent_fact_retrieval_api_v2_intelligent_query_facts_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecursiveFactRetrievalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecursiveFactRetrievalResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/intelligent-query/health": {
      "get": {
        "tags": [
          "intelligent-retrieval"
        ],
        "summary": "Health Check",
        "description": "Health check for intelligent retrieval endpoint.",
        "operationId": "health_check_api_v2_intelligent_query_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v2/intelligent-query/info": {
      "get": {
        "tags": [
          "intelligent-retrieval"
        ],
        "summary": "Get Endpoint Info",
        "description": "Get information about the intelligent retrieval endpoint.",
        "operationId": "get_endpoint_info_api_v2_intelligent_query_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v2/reasoning/status": {
      "get": {
        "tags": [
          "Multi-Hop Reasoning"
        ],
        "summary": "Get Reasoning Status",
        "description": "Get the status of multi-hop reasoning capabilities.",
        "operationId": "get_reasoning_status_api_v2_reasoning_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasoningStatus"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/reasoning/query": {
      "post": {
        "tags": [
          "Multi-Hop Reasoning"
        ],
        "summary": "Multi Hop Reasoning",
        "description": "Perform multi-hop reasoning to answer a complex query.",
        "operationId": "multi_hop_reasoning_api_v2_reasoning_query_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiHopQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasoningResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/reasoning/strategies": {
      "get": {
        "tags": [
          "Multi-Hop Reasoning"
        ],
        "summary": "Get Reasoning Strategies",
        "description": "Get available reasoning strategies and their descriptions.",
        "operationId": "get_reasoning_strategies_api_v2_reasoning_strategies_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v2/reasoning/query/facts": {
      "post": {
        "tags": [
          "Multi-Hop Reasoning"
        ],
        "summary": "Fact Based Reasoning",
        "description": "Perform fact-based multi-hop reasoning using the new graph structure.\n\nThis endpoint uses the RecursiveFactRetrievalService to:\n1. Extract entities from the user query\n2. Perform recursive graph traversal with fact extraction\n3. Score and filter facts based on relevance\n4. Generate a final synthesized answer\n5. Return structured facts with source attribution",
        "operationId": "fact_based_reasoning_api_v2_reasoning_query_facts_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecursiveFactRetrievalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecursiveFactRetrievalResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/reasoning/query/facts/simple": {
      "post": {
        "tags": [
          "Multi-Hop Reasoning"
        ],
        "summary": "Simple Fact Based Reasoning",
        "description": "Simplified fact-based reasoning endpoint with fewer parameters.\n\nThis is a convenience endpoint that uses sensible defaults for most parameters.",
        "operationId": "simple_fact_based_reasoning_api_v2_reasoning_query_facts_simple_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FactBasedQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/recursive-fact-retrieval": {
      "post": {
        "tags": [
          "recursive-fact-retrieval"
        ],
        "summary": "Recursive Fact Retrieval",
        "description": "Perform recursive fact retrieval using graph-based RAG system.\n\nThis endpoint implements the complete recursive fact retrieval system as specified\nin RECURSIVE_FACT_RETRIEVAL.md, including:\n\n1. **GraphTraversalAgent (GTA)**: Navigates the Neo4j graph, identifies relevant \n   nodes and relationships, and extracts raw facts\n2. **FactCriticAgent (FCA)**: Evaluates the relevance and quality of raw facts, \n   assigns scores and generates user-friendly source descriptions\n3. **Orchestration Logic**: Manages the overall process including initial query \n   processing, iterative graph traversal, fact collection, scoring, relevance \n   decay, and final answer generation\n\nThe system performs intelligent graph traversal, extracts facts at each node,\nevaluates their relevance, applies depth-based decay, and synthesizes a final\nanswer using a stronger LLM.\n\n**Key Features:**\n- Intelligent entity identification from user queries\n- Breadth-first graph traversal with LLM-guided decisions\n- Fact extraction from node properties and associated content\n- Relevance scoring and depth-based decay\n- Final answer synthesis with confidence scoring\n- Configurable depth limits and scoring thresholds\n- Support for custom database configurations",
        "operationId": "recursive_fact_retrieval_api_v2_recursive_fact_retrieval_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecursiveFactRetrievalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecursiveFactRetrievalResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/recursive-fact-retrieval/info": {
      "get": {
        "tags": [
          "recursive-fact-retrieval"
        ],
        "summary": "Get Recursive Fact Retrieval Info",
        "description": "Get information about the recursive fact retrieval endpoint.",
        "operationId": "get_recursive_fact_retrieval_info_api_v2_recursive_fact_retrieval_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v2/recursive-fact-retrieval/health": {
      "get": {
        "tags": [
          "recursive-fact-retrieval"
        ],
        "summary": "Check Recursive Fact Retrieval Health",
        "description": "Check the health of recursive fact retrieval components.",
        "operationId": "check_recursive_fact_retrieval_health_api_v2_recursive_fact_retrieval_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BatchIngestResponse": {
        "properties": {
          "batch_id": {
            "type": "string",
            "title": "Batch Id"
          },
          "task_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Task Ids"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "pending"
          }
        },
        "type": "object",
        "required": [
          "batch_id",
          "task_ids"
        ],
        "title": "BatchIngestResponse",
        "description": "Response model for batch ingestion operations."
      },
      "Body_convert_to_markdown_api_convert_markdown_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "default": true
          },
          "language": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Language"
          },
          "document_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Id"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_convert_to_markdown_api_convert_markdown_post"
      },
      "Body_ingest_file_api_v1_ingest_file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "request_data": {
            "type": "string",
            "title": "Request Data"
          }
        },
        "type": "object",
        "required": [
          "file",
          "request_data"
        ],
        "title": "Body_ingest_file_api_v1_ingest_file_post"
      },
      "Body_process_file_process_file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "content_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Type"
          },
          "options": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_process_file_process_file_post"
      },
      "Body_process_with_ingestion_api_convert_process_ingest_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "webhook_url": {
            "type": "string",
            "title": "Webhook Url"
          },
          "document_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Id"
          },
          "webhook_auth_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Webhook Auth Token"
          },
          "collection_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection Name"
          },
          "language": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Language"
          },
          "chunking_strategy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunking Strategy"
          },
          "chunk_size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunk Size"
          },
          "chunk_overlap": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunk Overlap"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "file",
          "webhook_url"
        ],
        "title": "Body_process_with_ingestion_api_convert_process_ingest_post"
      },
      "Body_unified_process_api_v1_process_post": {
        "properties": {
          "file": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "File"
          },
          "request_data": {
            "type": "string",
            "title": "Request Data",
            "description": "JSON string containing UnifiedProcessRequest data"
          }
        },
        "type": "object",
        "required": [
          "request_data"
        ],
        "title": "Body_unified_process_api_v1_process_post"
      },
      "ContextInfo": {
        "properties": {
          "entity_count": {
            "type": "integer",
            "title": "Entity Count",
            "description": "Number of entities in context"
          },
          "relation_count": {
            "type": "integer",
            "title": "Relation Count",
            "description": "Number of relations in context"
          },
          "document_count": {
            "type": "integer",
            "title": "Document Count",
            "description": "Number of documents in context"
          },
          "path_count": {
            "type": "integer",
            "title": "Path Count",
            "description": "Number of paths in context"
          }
        },
        "type": "object",
        "required": [
          "entity_count",
          "relation_count",
          "document_count",
          "path_count"
        ],
        "title": "ContextInfo",
        "description": "Information about the reasoning context."
      },
      "CreateRemoteJobRequest": {
        "properties": {
          "source_file_path": {
            "type": "string",
            "title": "Source File Path",
            "description": "Path to source file for processing"
          },
          "content_type": {
            "type": "string",
            "title": "Content Type",
            "description": "Content type (audio, video, etc.)"
          },
          "task_options": {
            "additionalProperties": true,
            "type": "object",
            "title": "Task Options",
            "description": "Processing options"
          },
          "ingestion_task_id": {
            "type": "string",
            "title": "Ingestion Task Id",
            "description": "Associated ingestion task ID"
          }
        },
        "type": "object",
        "required": [
          "source_file_path",
          "content_type",
          "ingestion_task_id"
        ],
        "title": "CreateRemoteJobRequest",
        "description": "Request model for creating a remote job."
      },
      "CreateRemoteJobResponse": {
        "properties": {
          "job_id": {
            "type": "string",
            "title": "Job Id",
            "description": "Unique job identifier"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Job status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Job creation timestamp"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "status",
          "created_at"
        ],
        "title": "CreateRemoteJobResponse",
        "description": "Response model for creating a remote job."
      },
      "ServerConfig": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DatabaseType",
            "description": "Database type"
          },
          "hostname": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hostname",
            "description": "Database hostname/URI"
          },
          "port": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port",
            "description": "Database port"
          },
          "username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Username",
            "description": "Database username"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password",
            "description": "Database password"
          },
          "database_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database Name",
            "description": "Database name/collection name"
          },
          "config_options": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config Options",
            "description": "Additional database-specific options"
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "ServerConfig",
        "description": "Configuration for a single database server connection."
      },
      "DatabaseType": {
        "type": "string",
        "enum": [
          "neo4j",
          "qdrant"
        ],
        "title": "DatabaseType",
        "description": "Supported database types."
      },
      "EnhancedQueryRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "The user's query text"
          },
          "query_type": {
            "$ref": "#/components/schemas/QueryType",
            "description": "Type of query processing",
            "default": "simple"
          },
          "max_results": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Max Results",
            "description": "Maximum number of results",
            "default": 10
          },
          "expansion_strategy": {
            "$ref": "#/components/schemas/ExpansionStrategy",
            "description": "Context expansion strategy",
            "default": "adaptive"
          },
          "expansion_depth": {
            "type": "integer",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Expansion Depth",
            "description": "Maximum expansion depth",
            "default": 2
          },
          "fusion_strategy": {
            "$ref": "#/components/schemas/FusionStrategy",
            "description": "Result fusion strategy",
            "default": "adaptive"
          },
          "entity_types": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Types",
            "description": "Filter by entity types"
          },
          "relation_types": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Relation Types",
            "description": "Filter by relation types"
          },
          "time_range": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string",
                  "format": "date-time"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Range",
            "description": "Time range filter"
          },
          "include_graph_context": {
            "type": "boolean",
            "title": "Include Graph Context",
            "description": "Include graph context in response",
            "default": true
          },
          "include_reasoning_path": {
            "type": "boolean",
            "title": "Include Reasoning Path",
            "description": "Include reasoning path",
            "default": false
          },
          "enable_multi_hop": {
            "type": "boolean",
            "title": "Enable Multi Hop",
            "description": "Enable multi-hop reasoning",
            "default": true
          },
          "min_relevance_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Min Relevance Score",
            "description": "Minimum relevance threshold",
            "default": 0.1
          },
          "timeout_seconds": {
            "type": "integer",
            "maximum": 300.0,
            "minimum": 1.0,
            "title": "Timeout Seconds",
            "description": "Query timeout",
            "default": 30
          },
          "database_servers": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database Servers",
            "description": "Optional array of database server configurations. If not provided, uses environment defaults."
          },
          "use_fact_retrieval": {
            "type": "boolean",
            "title": "Use Fact Retrieval",
            "description": "Use fact-based retrieval instead of traditional hybrid retrieval",
            "default": true
          },
          "max_depth": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Max Depth",
            "description": "Maximum traversal depth for fact extraction",
            "default": 3
          },
          "max_facts_per_node": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 1.0,
            "title": "Max Facts Per Node",
            "description": "Maximum facts to extract per node (set high for exhaustive retrieval)",
            "default": 1000
          },
          "min_fact_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Min Fact Score",
            "description": "Minimum score threshold for facts",
            "default": 0.1
          },
          "max_total_facts": {
            "type": "integer",
            "maximum": 100000.0,
            "minimum": 1.0,
            "title": "Max Total Facts",
            "description": "Maximum total facts to collect (set high for exhaustive retrieval)",
            "default": 10000
          },
          "facts_only": {
            "type": "boolean",
            "title": "Facts Only",
            "description": "Return only facts without final answer synthesis",
            "default": false
          },
          "skip_fact_evaluation": {
            "type": "boolean",
            "title": "Skip Fact Evaluation",
            "description": "Skip fact evaluation for faster processing",
            "default": false
          },
          "decay_rate": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Decay Rate",
            "description": "Rate at which fact scores decay per depth level",
            "default": 0.2
          },
          "language": {
            "type": "string",
            "title": "Language",
            "description": "Language for fact extraction and processing",
            "default": "en"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "EnhancedQueryRequest",
        "description": "Enhanced query request with graph-augmented capabilities."
      },
      "EnhancedQueryResponse": {
        "properties": {
          "query_id": {
            "type": "string",
            "title": "Query Id"
          },
          "query": {
            "type": "string",
            "title": "Query"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/EnhancedResult"
            },
            "type": "array",
            "title": "Results"
          },
          "graph_context": {
            "$ref": "#/components/schemas/GraphContext"
          },
          "total_results": {
            "type": "integer",
            "title": "Total Results"
          },
          "processing_time_ms": {
            "type": "number",
            "title": "Processing Time Ms"
          },
          "fusion_strategy_used": {
            "$ref": "#/components/schemas/FusionStrategy"
          },
          "expansion_strategy_used": {
            "$ref": "#/components/schemas/ExpansionStrategy"
          },
          "confidence_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Confidence Score"
          },
          "completeness_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Completeness Score"
          },
          "facts": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FactInfo"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Facts",
            "description": "Extracted facts from graph traversal"
          },
          "final_answer": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Final Answer",
            "description": "Final synthesized answer"
          },
          "initial_entities": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Initial Entities",
            "description": "Initial entities identified"
          },
          "total_nodes_explored": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Nodes Explored",
            "description": "Total nodes explored"
          },
          "max_depth_reached": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Depth Reached",
            "description": "Maximum depth reached"
          },
          "traversal_steps": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/TraversalStepInfo"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Traversal Steps",
            "description": "Traversal steps"
          },
          "total_raw_facts": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Raw Facts",
            "description": "Total raw facts extracted"
          },
          "total_scored_facts": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Scored Facts",
            "description": "Total scored facts"
          },
          "gta_llm_calls": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gta Llm Calls",
            "description": "GraphTraversalAgent LLM calls"
          },
          "fca_llm_calls": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fca Llm Calls",
            "description": "FactCriticAgent LLM calls"
          },
          "final_llm_calls": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Final Llm Calls",
            "description": "Final synthesis LLM calls"
          },
          "debug_info": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Debug Info"
          }
        },
        "type": "object",
        "required": [
          "query_id",
          "query",
          "results",
          "graph_context",
          "total_results",
          "processing_time_ms",
          "fusion_strategy_used",
          "expansion_strategy_used",
          "confidence_score",
          "completeness_score"
        ],
        "title": "EnhancedQueryResponse",
        "description": "Enhanced query response with comprehensive graph context."
      },
      "EnhancedResult": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "relevance_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Relevance Score"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata"
          },
          "connected_entities": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Connected Entities"
          },
          "relation_context": {
            "items": {
              "$ref": "#/components/schemas/RelationInfo"
            },
            "type": "array",
            "title": "Relation Context"
          },
          "reasoning_path": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reasoning Path"
          }
        },
        "type": "object",
        "required": [
          "id",
          "content",
          "relevance_score",
          "source_type",
          "document_id"
        ],
        "title": "EnhancedResult",
        "description": "Enhanced result with graph context information."
      },
      "EntityInfo": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "properties": {
            "additionalProperties": true,
            "type": "object",
            "title": "Properties"
          },
          "relevance_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Relevance Score"
          },
          "source_documents": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Source Documents"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "relevance_score"
        ],
        "title": "EntityInfo",
        "description": "Information about an entity in the graph context."
      },
      "EntityPath": {
        "properties": {
          "entity_id": {
            "type": "string",
            "title": "Entity Id",
            "description": "Starting entity ID"
          },
          "entity_name": {
            "type": "string",
            "title": "Entity Name",
            "description": "Starting entity name"
          },
          "path_entities": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Path Entities",
            "description": "Entities in the path"
          },
          "path_relations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Path Relations",
            "description": "Relations in the path"
          },
          "depth": {
            "type": "integer",
            "title": "Depth",
            "description": "Path depth"
          },
          "relevance_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Relevance Score",
            "description": "Path relevance score"
          },
          "llm_decision": {
            "$ref": "#/components/schemas/PathDecision",
            "description": "LLM decision for this path"
          },
          "decision_reasoning": {
            "type": "string",
            "title": "Decision Reasoning",
            "description": "LLM reasoning for the decision"
          }
        },
        "type": "object",
        "required": [
          "entity_id",
          "entity_name",
          "path_entities",
          "path_relations",
          "depth",
          "relevance_score",
          "llm_decision",
          "decision_reasoning"
        ],
        "title": "EntityPath",
        "description": "A path through the graph starting from an entity."
      },
      "EntityQueryRequest": {
        "properties": {
          "entity_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Id",
            "description": "Specific entity ID"
          },
          "entity_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Name",
            "description": "Entity name to search"
          },
          "entity_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Type",
            "description": "Entity type filter"
          },
          "include_relations": {
            "type": "boolean",
            "title": "Include Relations",
            "description": "Include entity relations",
            "default": true
          },
          "relation_depth": {
            "type": "integer",
            "maximum": 3.0,
            "minimum": 1.0,
            "title": "Relation Depth",
            "description": "Relation traversal depth",
            "default": 1
          },
          "max_relations": {
            "type": "integer",
            "maximum": 200.0,
            "minimum": 1.0,
            "title": "Max Relations",
            "description": "Maximum relations to return",
            "default": 50
          },
          "database_servers": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database Servers",
            "description": "Optional array of database server configurations. If not provided, uses environment defaults."
          }
        },
        "type": "object",
        "title": "EntityQueryRequest",
        "description": "Request for querying specific entities and their relationships."
      },
      "ExpansionStrategy": {
        "type": "string",
        "enum": [
          "direct_neighbors",
          "breadth_first",
          "shortest_path",
          "adaptive",
          "none"
        ],
        "title": "ExpansionStrategy",
        "description": "Strategies for expanding query context using graph traversal."
      },
      "FactBasedQuery": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "The query to answer using fact-based reasoning"
          },
          "max_depth": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Max Depth",
            "description": "Maximum traversal depth",
            "default": 3
          },
          "max_facts": {
            "type": "integer",
            "maximum": 500.0,
            "minimum": 1.0,
            "title": "Max Facts",
            "description": "Maximum total facts to collect",
            "default": 50
          },
          "facts_only": {
            "type": "boolean",
            "title": "Facts Only",
            "description": "Return only facts without final answer synthesis",
            "default": false
          },
          "language": {
            "type": "string",
            "title": "Language",
            "description": "Language for fact extraction and processing",
            "default": "en"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "FactBasedQuery",
        "description": "Simplified fact-based reasoning query request."
      },
      "FactInfo": {
        "properties": {
          "fact_text": {
            "type": "string",
            "title": "Fact Text",
            "description": "The extracted fact text"
          },
          "source_node_id": {
            "type": "string",
            "title": "Source Node Id",
            "description": "Source node ID in the graph"
          },
          "source_property": {
            "type": "string",
            "title": "Source Property",
            "description": "Source property name"
          },
          "source_qdrant_chunk_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Qdrant Chunk Id",
            "description": "Source Qdrant chunk ID"
          },
          "source_metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Metadata",
            "description": "Source metadata"
          },
          "extracted_from_depth": {
            "type": "integer",
            "title": "Extracted From Depth",
            "description": "Depth at which this fact was extracted"
          },
          "score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Score",
            "description": "Fact relevance score"
          },
          "final_decayed_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Final Decayed Score",
            "description": "Final score after decay"
          },
          "source_description": {
            "type": "string",
            "title": "Source Description",
            "description": "Human-readable source description"
          }
        },
        "type": "object",
        "required": [
          "fact_text",
          "source_node_id",
          "source_property",
          "extracted_from_depth",
          "score",
          "final_decayed_score",
          "source_description"
        ],
        "title": "FactInfo",
        "description": "Information about an extracted fact."
      },
      "FinalFact": {
        "properties": {
          "fact_text": {
            "type": "string",
            "title": "Fact Text",
            "description": "A comprehensive, detailed piece of information with full context"
          },
          "source_node_id": {
            "type": "string",
            "title": "Source Node Id",
            "description": "ID of the node where this fact was found"
          },
          "source_property": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Property",
            "description": "Optional property name if fact from property"
          },
          "source_qdrant_chunk_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Qdrant Chunk Id",
            "description": "Optional ID of Qdrant chunk if fact from chunk content"
          },
          "source_metadata": {
            "$ref": "#/components/schemas/SourceMetadata",
            "description": "Detailed source metadata"
          },
          "extracted_from_depth": {
            "type": "integer",
            "title": "Extracted From Depth",
            "description": "Integer representing the traversal depth when this fact was extracted"
          },
          "score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Score",
            "description": "Original relevance score assigned by FCA"
          },
          "source_description": {
            "type": "string",
            "title": "Source Description",
            "description": "A user-friendly description of the source"
          },
          "final_decayed_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Final Decayed Score",
            "description": "Score after applying depth-based decay"
          }
        },
        "type": "object",
        "required": [
          "fact_text",
          "source_node_id",
          "extracted_from_depth",
          "score",
          "source_description",
          "final_decayed_score"
        ],
        "title": "FinalFact",
        "description": "A fact with final decayed score after relevance decay."
      },
      "FusionStrategy": {
        "type": "string",
        "enum": [
          "weighted",
          "reciprocal_rank_fusion",
          "adaptive",
          "vector_only",
          "graph_only"
        ],
        "title": "FusionStrategy",
        "description": "Strategies for fusing vector and graph retrieval results."
      },
      "GraphAnalyticsRequest": {
        "properties": {
          "metric_type": {
            "type": "string",
            "title": "Metric Type",
            "description": "Type of analytics metric (overview, centrality, communities)",
            "default": "overview"
          },
          "database_servers": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database Servers",
            "description": "Optional array of database server configurations. If not provided, uses environment defaults."
          }
        },
        "type": "object",
        "title": "GraphAnalyticsRequest",
        "description": "Request for graph analytics and statistics."
      },
      "GraphContext": {
        "properties": {
          "entities": {
            "additionalProperties": {
              "$ref": "#/components/schemas/EntityInfo"
            },
            "type": "object",
            "title": "Entities"
          },
          "relations": {
            "items": {
              "$ref": "#/components/schemas/RelationInfo"
            },
            "type": "array",
            "title": "Relations"
          },
          "expansion_path": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Expansion Path"
          },
          "reasoning_steps": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reasoning Steps"
          }
        },
        "type": "object",
        "title": "GraphContext",
        "description": "Graph context information for enhanced query results."
      },
      "GraphPath": {
        "properties": {
          "entities": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Entities"
          },
          "relations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Relations"
          },
          "total_weight": {
            "type": "number",
            "title": "Total Weight"
          },
          "confidence": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Confidence"
          }
        },
        "type": "object",
        "required": [
          "entities",
          "relations",
          "total_weight",
          "confidence"
        ],
        "title": "GraphPath",
        "description": "A path through the graph between entities."
      },
      "GraphTraversalRequest": {
        "properties": {
          "start_entity": {
            "type": "string",
            "title": "Start Entity",
            "description": "Starting entity ID"
          },
          "end_entity": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Entity",
            "description": "Target entity ID"
          },
          "traversal_type": {
            "type": "string",
            "title": "Traversal Type",
            "description": "Type of traversal",
            "default": "shortest_path"
          },
          "max_depth": {
            "type": "integer",
            "maximum": 6.0,
            "minimum": 1.0,
            "title": "Max Depth",
            "description": "Maximum traversal depth",
            "default": 3
          },
          "max_paths": {
            "type": "integer",
            "maximum": 50.0,
            "minimum": 1.0,
            "title": "Max Paths",
            "description": "Maximum paths to return",
            "default": 10
          },
          "relation_filters": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Relation Filters",
            "description": "Allowed relation types"
          },
          "entity_filters": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Filters",
            "description": "Allowed entity types"
          },
          "database_servers": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database Servers",
            "description": "Optional array of database server configurations. If not provided, uses environment defaults."
          }
        },
        "type": "object",
        "required": [
          "start_entity"
        ],
        "title": "GraphTraversalRequest",
        "description": "Request for graph traversal between entities."
      },
      "GraphTraversalResponse": {
        "properties": {
          "start_entity": {
            "type": "string",
            "title": "Start Entity"
          },
          "end_entity": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Entity"
          },
          "paths": {
            "items": {
              "$ref": "#/components/schemas/GraphPath"
            },
            "type": "array",
            "title": "Paths"
          },
          "total_paths_found": {
            "type": "integer",
            "title": "Total Paths Found"
          },
          "processing_time_ms": {
            "type": "number",
            "title": "Processing Time Ms"
          }
        },
        "type": "object",
        "required": [
          "start_entity",
          "end_entity",
          "paths",
          "total_paths_found",
          "processing_time_ms"
        ],
        "title": "GraphTraversalResponse",
        "description": "Response for graph traversal requests."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IngestBatchRequest": {
        "properties": {
          "items": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Items"
          },
          "webhook_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Webhook Url"
          },
          "database_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database Config"
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "IngestBatchRequest",
        "description": "Request model for batch ingestion."
      },
      "IngestRemoteFileRequest": {
        "properties": {
          "file_path": {
            "type": "string",
            "title": "File Path"
          },
          "source_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Type"
          },
          "document_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Id"
          },
          "collection_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection Name"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "chunking_strategy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunking Strategy"
          },
          "chunk_size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunk Size"
          },
          "chunk_overlap": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunk Overlap"
          },
          "database_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database Config"
          },
          "webhook_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Webhook Url"
          }
        },
        "type": "object",
        "required": [
          "file_path"
        ],
        "title": "IngestRemoteFileRequest",
        "description": "Request model for remote file ingestion."
      },
      "IngestResponse": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "pending"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "task_id"
        ],
        "title": "IngestResponse",
        "description": "Response model for ingestion operations."
      },
      "IngestURLRequest": {
        "properties": {
          "source_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Type"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "document_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Id"
          },
          "collection_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection Name"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "database_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database Config"
          },
          "webhook_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Webhook Url"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "IngestURLRequest",
        "description": "Request model for URL ingestion."
      },
      "IntelligentRetrievalRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "User query/prompt"
          },
          "max_iterations": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Max Iterations",
            "description": "Maximum recursive iterations",
            "default": 5
          },
          "max_entities_per_iteration": {
            "type": "integer",
            "maximum": 50.0,
            "minimum": 1.0,
            "title": "Max Entities Per Iteration",
            "description": "Max entities to explore per iteration",
            "default": 10
          },
          "max_paths_per_entity": {
            "type": "integer",
            "maximum": 20.0,
            "minimum": 1.0,
            "title": "Max Paths Per Entity",
            "description": "Max paths to consider per entity",
            "default": 5
          },
          "max_depth": {
            "type": "integer",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Max Depth",
            "description": "Maximum path depth",
            "default": 3
          },
          "min_relevance_threshold": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Min Relevance Threshold",
            "description": "Minimum relevance threshold",
            "default": 0.3
          },
          "include_debug_info": {
            "type": "boolean",
            "title": "Include Debug Info",
            "description": "Include debug information in response",
            "default": false
          },
          "neo4j_database": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Neo4J Database",
            "description": "Neo4j database name"
          },
          "qdrant_collection": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Qdrant Collection",
            "description": "Qdrant collection name"
          },
          "language": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Language",
            "description": "Language for processing"
          },
          "neo4j_server": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ServerConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Custom Neo4j server configuration"
          },
          "qdrant_server": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ServerConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Custom Qdrant server configuration"
          },
          "max_retries": {
            "type": "integer",
            "maximum": 20.0,
            "minimum": 1.0,
            "title": "Max Retries",
            "description": "Maximum retry attempts for overload errors",
            "default": 8
          },
          "retry_base_delay": {
            "type": "number",
            "maximum": 10.0,
            "minimum": 0.1,
            "title": "Retry Base Delay",
            "description": "Base delay for exponential backoff (seconds)",
            "default": 2.0
          },
          "retry_max_delay": {
            "type": "number",
            "maximum": 300.0,
            "minimum": 1.0,
            "title": "Retry Max Delay",
            "description": "Maximum delay between retries (seconds)",
            "default": 120.0
          },
          "retry_jitter": {
            "type": "boolean",
            "title": "Retry Jitter",
            "description": "Add random jitter to retry delays",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "IntelligentRetrievalRequest",
        "description": "Request for intelligent entity-based retrieval."
      },
      "IntelligentRetrievalResponse": {
        "properties": {
          "query_id": {
            "type": "string",
            "title": "Query Id",
            "description": "Unique query identifier"
          },
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Original user query"
          },
          "key_facts": {
            "items": {
              "$ref": "#/components/schemas/KeyFact"
            },
            "type": "array",
            "title": "Key Facts",
            "description": "Extracted key facts relevant to the query"
          },
          "total_iterations": {
            "type": "integer",
            "title": "Total Iterations",
            "description": "Total iterations performed"
          },
          "iterations": {
            "items": {
              "$ref": "#/components/schemas/RetrievalIteration"
            },
            "type": "array",
            "title": "Iterations",
            "description": "Details of each iteration"
          },
          "initial_entities": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Initial Entities",
            "description": "Initially identified entities"
          },
          "total_entities_explored": {
            "type": "integer",
            "title": "Total Entities Explored",
            "description": "Total unique entities explored"
          },
          "total_chunks_retrieved": {
            "type": "integer",
            "title": "Total Chunks Retrieved",
            "description": "Total chunks retrieved"
          },
          "confidence_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Confidence Score",
            "description": "Overall confidence in results"
          },
          "completeness_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Completeness Score",
            "description": "Estimated completeness of information"
          },
          "processing_time_ms": {
            "type": "number",
            "title": "Processing Time Ms",
            "description": "Total processing time in milliseconds"
          },
          "llm_calls_made": {
            "type": "integer",
            "title": "Llm Calls Made",
            "description": "Number of LLM calls made"
          },
          "debug_info": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Debug Info",
            "description": "Debug information if requested"
          }
        },
        "type": "object",
        "required": [
          "query_id",
          "query",
          "key_facts",
          "total_iterations",
          "iterations",
          "initial_entities",
          "total_entities_explored",
          "total_chunks_retrieved",
          "confidence_score",
          "completeness_score",
          "processing_time_ms",
          "llm_calls_made"
        ],
        "title": "IntelligentRetrievalResponse",
        "description": "Response from intelligent entity-based retrieval."
      },
      "JobStatusResponse": {
        "properties": {
          "job_id": {
            "type": "string",
            "title": "Job Id",
            "description": "Job identifier"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Current job status"
          },
          "worker_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Worker Id",
            "description": "Assigned worker ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Job creation timestamp"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At",
            "description": "Processing start timestamp"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At",
            "description": "Processing completion timestamp"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message",
            "description": "Error message if failed"
          },
          "retry_count": {
            "type": "integer",
            "title": "Retry Count",
            "description": "Number of retry attempts"
          },
          "estimated_completion": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Completion",
            "description": "Estimated completion time"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "status",
          "created_at",
          "retry_count"
        ],
        "title": "JobStatusResponse",
        "description": "Response model for job status."
      },
      "KeyFact": {
        "properties": {
          "fact": {
            "type": "string",
            "title": "Fact",
            "description": "The extracted key fact"
          },
          "confidence": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Confidence",
            "description": "Confidence in the fact"
          },
          "relevance_to_query": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Relevance To Query",
            "description": "Relevance to user query"
          },
          "fact_type": {
            "type": "string",
            "title": "Fact Type",
            "description": "Type of fact (e.g., 'definition', 'relationship', 'statistic')"
          },
          "sources": {
            "items": {
              "$ref": "#/components/schemas/SourceInfo"
            },
            "type": "array",
            "title": "Sources",
            "description": "Source information for this fact"
          },
          "supporting_entities": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Supporting Entities",
            "description": "Entities that support this fact"
          }
        },
        "type": "object",
        "required": [
          "fact",
          "confidence",
          "relevance_to_query",
          "fact_type",
          "sources"
        ],
        "title": "KeyFact",
        "description": "A key fact extracted from chunks with source information."
      },
      "MarkdownConversionResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "markdown": {
            "type": "string",
            "title": "Markdown",
            "description": "Converted markdown content"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata",
            "description": "File metadata and conversion info"
          },
          "processing_time_ms": {
            "type": "number",
            "title": "Processing Time Ms",
            "description": "Processing time in milliseconds"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "markdown",
          "metadata",
          "processing_time_ms"
        ],
        "title": "MarkdownConversionResponse",
        "description": "Response model for markdown conversion."
      },
      "MultiHopQuery": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "The query to answer using multi-hop reasoning"
          },
          "start_entities": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Start Entities",
            "description": "Starting entities for reasoning"
          },
          "target_entities": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Entities",
            "description": "Optional target entities"
          },
          "strategy": {
            "type": "string",
            "title": "Strategy",
            "description": "Reasoning strategy (forward_chaining, backward_chaining, bidirectional)",
            "default": "forward_chaining"
          },
          "max_depth": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Max Depth",
            "description": "Maximum reasoning depth",
            "default": 4
          },
          "max_paths": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Max Paths",
            "description": "Maximum paths to discover",
            "default": 50
          },
          "max_iterations": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Max Iterations",
            "description": "Maximum refinement iterations",
            "default": 5
          },
          "database_servers": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database Servers",
            "description": "Optional array of database server configurations. If not provided, uses environment defaults."
          }
        },
        "type": "object",
        "required": [
          "query",
          "start_entities"
        ],
        "title": "MultiHopQuery",
        "description": "Multi-hop reasoning query request."
      },
      "PathDecision": {
        "type": "string",
        "enum": [
          "follow",
          "skip",
          "stop"
        ],
        "title": "PathDecision",
        "description": "LLM decisions for path following."
      },
      "PathInfo": {
        "properties": {
          "path_id": {
            "type": "string",
            "title": "Path Id",
            "description": "Unique path identifier"
          },
          "entities": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Entities",
            "description": "Entities in the path"
          },
          "relations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Relations",
            "description": "Relations in the path"
          },
          "relevance_score": {
            "type": "number",
            "title": "Relevance Score",
            "description": "Relevance score for the path"
          },
          "confidence": {
            "type": "number",
            "title": "Confidence",
            "description": "Confidence in the path"
          },
          "reasoning": {
            "type": "string",
            "title": "Reasoning",
            "description": "Reasoning for path selection"
          }
        },
        "type": "object",
        "required": [
          "path_id",
          "entities",
          "relations",
          "relevance_score",
          "confidence",
          "reasoning"
        ],
        "title": "PathInfo",
        "description": "Information about a reasoning path."
      },
      "PollJobsResponse": {
        "properties": {
          "job_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Job Id",
            "description": "Job ID if available"
          },
          "source_file_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source File Url",
            "description": "Download URL for source file"
          },
          "content_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Type",
            "description": "Content type"
          },
          "task_options": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Options",
            "description": "Processing options"
          }
        },
        "type": "object",
        "title": "PollJobsResponse",
        "description": "Response model for polling jobs."
      },
      "ProcessBatchRequest": {
        "properties": {
          "items": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Items"
          },
          "options": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options"
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "ProcessBatchRequest",
        "description": "Request model for batch processing."
      },
      "ProcessIngestResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "Background task ID for tracking progress"
          },
          "document_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Id",
            "description": "Document ID (user-provided or generated)"
          },
          "estimated_time_seconds": {
            "type": "integer",
            "title": "Estimated Time Seconds",
            "description": "Estimated processing time in seconds"
          },
          "status_url": {
            "type": "string",
            "title": "Status Url",
            "description": "URL to check task status"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Human-readable status message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "task_id",
          "document_id",
          "estimated_time_seconds",
          "status_url",
          "message"
        ],
        "title": "ProcessIngestResponse",
        "description": "Response model for processing with ingestion."
      },
      "ProcessRemoteFileRequest": {
        "properties": {
          "file_path": {
            "type": "string",
            "title": "File Path"
          },
          "content_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Type"
          },
          "options": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options"
          }
        },
        "type": "object",
        "required": [
          "file_path"
        ],
        "title": "ProcessRemoteFileRequest",
        "description": "Request model for remote file processing."
      },
      "ProcessURLRequest": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "content_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Type"
          },
          "options": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "ProcessURLRequest",
        "description": "Request model for processing URLs."
      },
      "ProcessingResultResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "processing_time": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Processing Time"
          },
          "warnings": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Warnings"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "thumbnails": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Thumbnails"
          }
        },
        "type": "object",
        "required": [
          "success",
          "content"
        ],
        "title": "ProcessingResultResponse",
        "description": "Response model for processing results."
      },
      "QueryType": {
        "type": "string",
        "enum": [
          "simple",
          "entity_focused",
          "relation_focused",
          "multi_hop",
          "analytical"
        ],
        "title": "QueryType",
        "description": "Types of queries supported by the enhanced API."
      },
      "ReasoningResult": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Original query"
          },
          "strategy": {
            "type": "string",
            "title": "Strategy",
            "description": "Reasoning strategy used"
          },
          "paths_found": {
            "type": "integer",
            "title": "Paths Found",
            "description": "Number of reasoning paths found"
          },
          "selected_paths": {
            "items": {
              "$ref": "#/components/schemas/PathInfo"
            },
            "type": "array",
            "title": "Selected Paths",
            "description": "Selected reasoning paths"
          },
          "context_info": {
            "$ref": "#/components/schemas/ContextInfo",
            "description": "Final context information"
          },
          "iterations_used": {
            "type": "integer",
            "title": "Iterations Used",
            "description": "Number of refinement iterations used"
          },
          "final_confidence": {
            "type": "number",
            "title": "Final Confidence",
            "description": "Final confidence in result"
          },
          "reasoning_time_ms": {
            "type": "number",
            "title": "Reasoning Time Ms",
            "description": "Total reasoning time in milliseconds"
          },
          "context_sufficient": {
            "type": "boolean",
            "title": "Context Sufficient",
            "description": "Whether final context was sufficient"
          },
          "reasoning_summary": {
            "type": "string",
            "title": "Reasoning Summary",
            "description": "Summary of the reasoning process"
          }
        },
        "type": "object",
        "required": [
          "query",
          "strategy",
          "paths_found",
          "selected_paths",
          "context_info",
          "iterations_used",
          "final_confidence",
          "reasoning_time_ms",
          "context_sufficient",
          "reasoning_summary"
        ],
        "title": "ReasoningResult",
        "description": "Result of multi-hop reasoning."
      },
      "ReasoningStatus": {
        "properties": {
          "available": {
            "type": "boolean",
            "title": "Available",
            "description": "Whether reasoning is available"
          },
          "components": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object",
            "title": "Components",
            "description": "Status of individual components"
          },
          "configuration": {
            "additionalProperties": true,
            "type": "object",
            "title": "Configuration",
            "description": "Current configuration"
          }
        },
        "type": "object",
        "required": [
          "available",
          "components",
          "configuration"
        ],
        "title": "ReasoningStatus",
        "description": "Status of reasoning capabilities."
      },
      "RecursiveFactRetrievalRequest": {
        "properties": {
          "user_query": {
            "type": "string",
            "title": "User Query",
            "description": "The original query from the user"
          },
          "max_depth": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Max Depth",
            "description": "The maximum traversal depth for the GraphTraversalAgent",
            "default": 3
          },
          "decay_rate": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Decay Rate",
            "description": "The rate at which fact scores decay per depth level",
            "default": 0.2
          },
          "max_facts_per_node": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 1.0,
            "title": "Max Facts Per Node",
            "description": "Maximum facts to extract per node (set high for exhaustive retrieval)",
            "default": 1000
          },
          "min_fact_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Min Fact Score",
            "description": "Minimum score threshold for facts",
            "default": 0.1
          },
          "max_total_facts": {
            "type": "integer",
            "maximum": 100000.0,
            "minimum": 1.0,
            "title": "Max Total Facts",
            "description": "Maximum total facts to collect (set high for exhaustive retrieval)",
            "default": 10000
          },
          "facts_only": {
            "type": "boolean",
            "title": "Facts Only",
            "description": "If true, return only facts without final answer synthesis",
            "default": false
          },
          "skip_fact_evaluation": {
            "type": "boolean",
            "title": "Skip Fact Evaluation",
            "description": "If true, skip fact evaluation and return all raw facts without scoring",
            "default": false
          },
          "neo4j_database": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Neo4J Database",
            "description": "Neo4j database name (optional)"
          },
          "qdrant_collection": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Qdrant Collection",
            "description": "Qdrant collection name (optional)"
          },
          "language": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Language",
            "description": "Language for processing (optional)"
          },
          "database_servers": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database Servers",
            "description": "Optional array of database server configurations. If not provided, uses environment defaults."
          }
        },
        "type": "object",
        "required": [
          "user_query"
        ],
        "title": "RecursiveFactRetrievalRequest",
        "description": "Request for recursive fact retrieval."
      },
      "RecursiveFactRetrievalResponse": {
        "properties": {
          "query_id": {
            "type": "string",
            "title": "Query Id",
            "description": "Unique identifier for this query"
          },
          "user_query": {
            "type": "string",
            "title": "User Query",
            "description": "Original user query"
          },
          "processing_time_ms": {
            "type": "number",
            "title": "Processing Time Ms",
            "description": "Total processing time in milliseconds"
          },
          "initial_entities": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Initial Entities",
            "description": "Initial entities identified from query"
          },
          "total_nodes_explored": {
            "type": "integer",
            "title": "Total Nodes Explored",
            "description": "Total number of nodes explored"
          },
          "max_depth_reached": {
            "type": "integer",
            "title": "Max Depth Reached",
            "description": "Maximum depth reached during traversal"
          },
          "traversal_steps": {
            "items": {
              "$ref": "#/components/schemas/TraversalStep"
            },
            "type": "array",
            "title": "Traversal Steps",
            "description": "Detailed traversal steps"
          },
          "total_raw_facts": {
            "type": "integer",
            "title": "Total Raw Facts",
            "description": "Total raw facts extracted"
          },
          "total_scored_facts": {
            "type": "integer",
            "title": "Total Scored Facts",
            "description": "Total facts after scoring"
          },
          "final_facts": {
            "items": {
              "$ref": "#/components/schemas/FinalFact"
            },
            "type": "array",
            "title": "Final Facts",
            "description": "Final facts after decay and filtering"
          },
          "gta_llm_calls": {
            "type": "integer",
            "title": "Gta Llm Calls",
            "description": "Number of GraphTraversalAgent LLM calls"
          },
          "fca_llm_calls": {
            "type": "integer",
            "title": "Fca Llm Calls",
            "description": "Number of FactCriticAgent LLM calls"
          },
          "final_llm_calls": {
            "type": "integer",
            "title": "Final Llm Calls",
            "description": "Number of final synthesis LLM calls"
          },
          "final_answer": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Final Answer",
            "description": "Final synthesized answer from the stronger LLM (null if facts_only=true)"
          },
          "confidence_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Confidence Score",
            "description": "Overall confidence in the answer"
          },
          "debug_info": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Debug Info",
            "description": "Optional debug information"
          }
        },
        "type": "object",
        "required": [
          "query_id",
          "user_query",
          "processing_time_ms",
          "initial_entities",
          "total_nodes_explored",
          "max_depth_reached",
          "traversal_steps",
          "total_raw_facts",
          "total_scored_facts",
          "final_facts",
          "gta_llm_calls",
          "fca_llm_calls",
          "final_llm_calls",
          "confidence_score"
        ],
        "title": "RecursiveFactRetrievalResponse",
        "description": "Response from recursive fact retrieval."
      },
      "RelationInfo": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "source_entity": {
            "type": "string",
            "title": "Source Entity"
          },
          "target_entity": {
            "type": "string",
            "title": "Target Entity"
          },
          "relation_type": {
            "type": "string",
            "title": "Relation Type"
          },
          "properties": {
            "additionalProperties": true,
            "type": "object",
            "title": "Properties"
          },
          "confidence": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Confidence"
          },
          "source_documents": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Source Documents"
          }
        },
        "type": "object",
        "required": [
          "id",
          "source_entity",
          "target_entity",
          "relation_type",
          "confidence"
        ],
        "title": "RelationInfo",
        "description": "Information about a relation in the graph context."
      },
      "RetrievalIteration": {
        "properties": {
          "iteration": {
            "type": "integer",
            "title": "Iteration",
            "description": "Iteration number"
          },
          "entities_explored": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Entities Explored",
            "description": "Entities explored in this iteration"
          },
          "paths_found": {
            "items": {
              "$ref": "#/components/schemas/EntityPath"
            },
            "type": "array",
            "title": "Paths Found",
            "description": "Paths discovered"
          },
          "paths_followed": {
            "items": {
              "$ref": "#/components/schemas/EntityPath"
            },
            "type": "array",
            "title": "Paths Followed",
            "description": "Paths the LLM decided to follow"
          },
          "chunks_retrieved": {
            "type": "integer",
            "title": "Chunks Retrieved",
            "description": "Number of chunks retrieved"
          },
          "llm_stop_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Stop Reason",
            "description": "Reason LLM decided to stop"
          }
        },
        "type": "object",
        "required": [
          "iteration",
          "entities_explored",
          "paths_found",
          "paths_followed",
          "chunks_retrieved"
        ],
        "title": "RetrievalIteration",
        "description": "Information about a single iteration of recursive retrieval."
      },
      "SearchRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "default": 10
          },
          "database_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database Config"
          },
          "retrieval_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Retrieval Config"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "SearchRequest",
        "description": "Request model for search operations."
      },
      "SourceInfo": {
        "properties": {
          "document_id": {
            "type": "string",
            "title": "Document Id",
            "description": "Document identifier"
          },
          "chunk_id": {
            "type": "string",
            "title": "Chunk Id",
            "description": "Chunk identifier"
          },
          "document_name": {
            "type": "string",
            "title": "Document Name",
            "description": "Human-readable document name"
          },
          "chunk_text": {
            "type": "string",
            "title": "Chunk Text",
            "description": "Original chunk text"
          },
          "relevance_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Relevance Score",
            "description": "Relevance score"
          },
          "page_number": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Number",
            "description": "Page number if applicable"
          },
          "section": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Section",
            "description": "Document section"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata"
          }
        },
        "type": "object",
        "required": [
          "document_id",
          "chunk_id",
          "document_name",
          "chunk_text",
          "relevance_score"
        ],
        "title": "SourceInfo",
        "description": "Source information for key facts."
      },
      "SourceMetadata": {
        "properties": {
          "document_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Name",
            "description": "Name of the source document"
          },
          "chunk_index": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunk Index",
            "description": "Index of the chunk within the document"
          },
          "page_number": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Number",
            "description": "Page number if applicable"
          },
          "section": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Section",
            "description": "Document section"
          },
          "timestamp": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timestamp",
            "description": "Timestamp for audio/video content"
          },
          "additional_metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Additional Metadata",
            "description": "Additional source metadata"
          }
        },
        "type": "object",
        "title": "SourceMetadata",
        "description": "Detailed source metadata for facts."
      },
      "SubmitResultRequest": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether processing succeeded"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content",
            "description": "Processed content"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Processing metadata"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message",
            "description": "Error message if failed"
          },
          "processing_time": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Processing Time",
            "description": "Processing time in seconds"
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "SubmitResultRequest",
        "description": "Request model for submitting job results."
      },
      "SubmitResultResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Updated job status"
          },
          "ingestion_continued": {
            "type": "boolean",
            "title": "Ingestion Continued",
            "description": "Whether ingestion pipeline continued"
          }
        },
        "type": "object",
        "required": [
          "status",
          "ingestion_continued"
        ],
        "title": "SubmitResultResponse",
        "description": "Response model for submitting job results."
      },
      "TaskStatus": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "result": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Result"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "progress": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Progress"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "task_id",
          "status"
        ],
        "title": "TaskStatus",
        "description": "Model for task status information."
      },
      "TraversalStep": {
        "properties": {
          "node_id": {
            "type": "string",
            "title": "Node Id",
            "description": "Node ID being explored"
          },
          "node_name": {
            "type": "string",
            "title": "Node Name",
            "description": "Human-readable node name"
          },
          "depth": {
            "type": "integer",
            "title": "Depth",
            "description": "Depth at which this node was explored"
          },
          "facts_extracted": {
            "type": "integer",
            "title": "Facts Extracted",
            "description": "Number of facts extracted from this node"
          },
          "next_nodes_decision": {
            "type": "string",
            "title": "Next Nodes Decision",
            "description": "LLM decision about next nodes to explore"
          },
          "reasoning": {
            "type": "string",
            "title": "Reasoning",
            "description": "LLM reasoning for the decision"
          }
        },
        "type": "object",
        "required": [
          "node_id",
          "node_name",
          "depth",
          "facts_extracted",
          "next_nodes_decision",
          "reasoning"
        ],
        "title": "TraversalStep",
        "description": "Information about a single traversal step."
      },
      "TraversalStepInfo": {
        "properties": {
          "node_id": {
            "type": "string",
            "title": "Node Id",
            "description": "Node ID"
          },
          "node_name": {
            "type": "string",
            "title": "Node Name",
            "description": "Node name"
          },
          "depth": {
            "type": "integer",
            "title": "Depth",
            "description": "Traversal depth"
          },
          "facts_extracted": {
            "type": "integer",
            "title": "Facts Extracted",
            "description": "Number of facts extracted"
          },
          "next_nodes_decision": {
            "type": "string",
            "title": "Next Nodes Decision",
            "description": "Decision about next nodes"
          },
          "reasoning": {
            "type": "string",
            "title": "Reasoning",
            "description": "Reasoning for the decision"
          }
        },
        "type": "object",
        "required": [
          "node_id",
          "node_name",
          "depth",
          "facts_extracted",
          "next_nodes_decision",
          "reasoning"
        ],
        "title": "TraversalStepInfo",
        "description": "Information about a traversal step."
      },
      "UnifiedProcessResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the operation was successful"
          },
          "mode": {
            "type": "string",
            "title": "Mode",
            "description": "Processing mode that was used"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content",
            "description": "Processed content (markdown, full text, etc.)"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Processing metadata"
          },
          "processing_time_ms": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Processing Time Ms",
            "description": "Processing time in milliseconds"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Id",
            "description": "Background task ID for tracking progress"
          },
          "estimated_time_seconds": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Time Seconds",
            "description": "Estimated processing time in seconds"
          },
          "status_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status Url",
            "description": "URL to check processing status"
          },
          "document_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Id",
            "description": "Document ID (user-provided or generated)"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message",
            "description": "Error message if operation failed"
          },
          "warnings": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Warnings",
            "description": "Warning messages"
          },
          "thumbnails": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Thumbnails",
            "description": "Base64 encoded thumbnails for video content"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message",
            "description": "Human-readable status message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "mode"
        ],
        "title": "UnifiedProcessResponse",
        "description": "Unified response model for all processing operations."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token for API authentication"
      }
    }
  },
  "tags": [
    {
      "name": "Conversion",
      "description": "File conversion endpoints for UI preview functionality"
    },
    {
      "name": "Processing",
      "description": "Complete document processing with webhook notifications"
    },
    {
      "name": "Temporary Files",
      "description": "Temporary file management for intermediate processing results"
    },
    {
      "name": "Deduplication",
      "description": "Document deduplication and ID management"
    }
  ]
}
