// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Change to "mysql" for MariaDB/MySQL
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  avatar    String?
  password  String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  databases       Database[]
  documents       Document[]
  apiKeys         ApiKey[]
  jobs            Job[]
  databaseServers DatabaseServer[]
  userSettings    UserSettings?
  realms          Realm[]
  userRealms      UserRealm[]

  @@map("users")
}

model UserSettings {
  id               String  @id @default(uuid())
  userId           String  @unique
  theme            Theme   @default(LIGHT)
  language         String  @default("en")
  notifications    Boolean @default(true)
  autoSave         Boolean @default(true)
  defaultDatabase  String?
  currentRealmId   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Realm {
  id          String   @id @default(uuid())
  name        String
  description String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign keys
  ownerId     String

  // Relations
  owner           User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  userRealms      UserRealm[]
  databases       Database[]
  documents       Document[]
  apiKeys         ApiKey[]
  jobs            Job[]
  databaseServers DatabaseServer[]

  @@unique([name, ownerId])
  @@map("realms")
}

model UserRealm {
  id        String   @id @default(uuid())
  userId    String
  realmId   String
  role      RealmRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  realm Realm @relation(fields: [realmId], references: [id], onDelete: Cascade)

  @@unique([userId, realmId])
  @@map("user_realms")
}

model Database {
  id              String   @id @default(uuid())
  name            String
  description     String
  ingestionPrompt String?  // Optional prompt for document ingestion
  systemPrompt    String?  // Optional prompt for user queries
  documentCount   Int      @default(0)
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Foreign keys
  userId          String
  realmId         String

  // Relations
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  realm           Realm               @relation(fields: [realmId], references: [id], onDelete: Cascade)
  documents       Document[]
  databaseServers DatabaseServerLink[] // Many-to-many relationship with servers

  @@unique([name, userId, realmId])
  @@map("databases")
}

model Document {
  id         String        @id @default(uuid())
  name       String
  type       String
  state      DocumentState @default(PENDING)
  version    Int           @default(1)
  chunks     Int           @default(0)
  quality    Float         @default(0.0)
  uploadDate DateTime      @default(now())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  
  // Foreign keys
  userId     String
  databaseId String        // Required - each document must belong to exactly one database
  realmId    String

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  database Database @relation(fields: [databaseId], references: [id], onDelete: Cascade)
  realm    Realm    @relation(fields: [realmId], references: [id], onDelete: Cascade)
  jobs     Job[]

  @@map("documents")
}

model ApiKey {
  id        String   @id @default(uuid())
  name      String
  key       String   @unique
  created   DateTime @default(now())
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Foreign keys
  userId    String
  realmId   String

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  realm Realm @relation(fields: [realmId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model DatabaseServer {
  id            String               @id @default(uuid())
  name          String
  type          DatabaseType
  host          String
  port          Int
  username      String?
  password      String?
  apiKey        String?
  database      String?
  collection    String?
  isActive      Boolean              @default(false)
  createdAt     DateTime             @default(now())
  lastConnected DateTime?
  updatedAt     DateTime             @updatedAt
  
  // Foreign keys
  userId        String
  realmId       String

  // Relations
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  realm           Realm               @relation(fields: [realmId], references: [id], onDelete: Cascade)
  databaseServers DatabaseServerLink[] // Many-to-many relationship with databases

  @@map("database_servers")
}

model Job {
  id           String    @id @default(uuid())
  documentName String
  documentType String
  startDate    DateTime  @default(now())
  endDate      DateTime?
  status       JobStatus @default(PENDING)
  percentage   Int       @default(0)
  summary      String    @default("")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Foreign keys
  documentId   String
  userId       String
  realmId      String

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  realm    Realm    @relation(fields: [realmId], references: [id], onDelete: Cascade)

  @@map("jobs")
}

model DatabaseServerLink {
  id               String   @id @default(uuid())
  databaseId       String
  databaseServerId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  database       Database       @relation(fields: [databaseId], references: [id], onDelete: Cascade)
  databaseServer DatabaseServer @relation(fields: [databaseServerId], references: [id], onDelete: Cascade)

  @@unique([databaseId, databaseServerId])
  @@map("database_server_links")
}

// Enums
enum UserRole {
  ADMIN
  USER
  VIEWER
}

enum RealmRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum DocumentState {
  PENDING
  INGESTING
  INGESTED
  DEPRECATED
  DELETED
}

enum DatabaseType {
  QDRANT
  NEO4J
  PINECONE
  WEAVIATE
  CHROMA
}

enum JobStatus {
  PENDING
  WAITING_FOR_REMOTE_WORKER
  PROCESSING
  FINISHED
  FAILED
  CANCELLED
}